name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  # Build SnapShell for multiple platforms
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
            binary_name: snapshell-linux-amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
            binary_name: snapshell-linux-arm64
          - os: macos
            arch: amd64
            goos: darwin
            goarch: amd64
            binary_name: snapshell-macos-amd64
          - os: macos
            arch: arm64
            goos: darwin
            goarch: arm64
            binary_name: snapshell-macos-arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            binary_name: snapshell-windows-amd64.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build SnapShell
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          echo "Building for ${{ matrix.os }} ${{ matrix.arch }}..."
          go build -ldflags="-s -w" -o ${{ matrix.binary_name }} ./cmd/main.go
          ls -la ${{ matrix.binary_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary_name }}
          path: ${{ matrix.binary_name }}

  # Create GitHub release with built binaries
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: SnapShell ${{ steps.get_version.outputs.VERSION }}
          body: |
            # SnapShell Release ${{ steps.get_version.outputs.VERSION }}

            ## ðŸš€ What's New

            This release includes **improved cross-network WebRTC connectivity** with TURN-first policy:
            - **TURN server prioritization** for better cross-network connections
            - **Improved ICE candidate handling** with relay-first approach
            - **Better connectivity** across corporate networks, mobile networks, and different ISPs

            ## ðŸ“¦ Installation

            ### Homebrew (Recommended)
            ```bash
            brew tap saswatsam786/snapshell
            brew install snapshell
            ```

            ### Manual Build
            ```bash
            # Clone and build locally
            git clone https://github.com/saswatsam786/snapshell.git
            cd snapshell
            go build ./cmd/main.go
            ```

            ## ðŸŽ¯ Usage

            ```bash
            # Start video session (offerer)
            snapshell -signaled-o --room demo123 --server https://snapshell.onrender.com

            # Join video session (answerer) 
            snapshell -signaled-a --room demo123 --server https://snapshell.onrender.com
            ```

            ## ðŸ”§ Features

            - **WebRTC Video Sharing**: Real-time webcam to ASCII art conversion
            - **TURN Server Support**: Improved connectivity with Twilio TURN servers
            - **Cross-Network Support**: Better connectivity between different networks
            - **Signaling Server**: WebRTC signaling for peer-to-peer connections
            - **Cross-platform**: Works on macOS, Linux, and Windows

            ## ðŸ“‹ Requirements

            - Go 1.21+
            - OpenCV (automatically installed via Homebrew)
            - Webcam access

            ## ðŸ”— Links

            - [Homepage](https://saswatsam786.github.io/snapshell/)
            - [Documentation](https://github.com/saswatsam786/snapshell)
            - [Homebrew Tap](https://github.com/saswatsam786/homebrew-snapshell)

            ## ðŸ†• Changes in v1.2.0

            - **Fixed cross-network connectivity** by prioritizing TURN servers
            - **Added ICETransportPolicyRelay** for better relay candidate handling
            - **Improved WebRTC connection reliability** across different network configurations
            - **Better support for corporate networks** and mobile networks
          files: |
            snapshell-linux-amd64
            snapshell-linux-arm64
            snapshell-macos-amd64
            snapshell-macos-arm64
            snapshell-windows-amd64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update Homebrew formula when new tags are pushed
  update-homebrew:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: release

    steps:
      - name: Checkout homebrew-snapshell
        uses: actions/checkout@v4
        with:
          repository: saswatsam786/homebrew-snapshell
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update formula version
        run: |
          # Update the formula to point to the new tag instead of head
          sed -i "s|head \"https://github.com/saswatsam786/snapshell.git\", branch: \"main\"|url \"https://github.com/saswatsam786/snapshell/archive/${GITHUB_REF#refs/tags/}.tar.gz\"|" Formula/snapshell.rb
          sed -i "s|head \"https://github.com/saswatsam786/snapshell.git\", branch: \"main\"|version \"${{ steps.get_version.outputs.VERSION }}\"|" Formula/snapshell.rb

          # Add sha256 calculation (this would need to be updated manually or via API)
          echo "# Note: sha256 needs to be calculated and updated manually for now"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/snapshell.rb
          git commit -m "Update to version ${{ steps.get_version.outputs.VERSION }}" || echo "No changes to commit"
          git push origin main
